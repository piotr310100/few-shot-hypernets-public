[1mdiff --git a/methods/hypernets/fhypermaml.py b/methods/hypernets/fhypermaml.py[m
[1mindex a77e702..1e66b3b 100644[m
[1m--- a/methods/hypernets/fhypermaml.py[m
[1m+++ b/methods/hypernets/fhypermaml.py[m
[36m@@ -42,7 +42,7 @@[m [mclass FHyperMAML(MAML):[m
         self.hn_adaptation_strategy = params.hn_adaptation_strategy[m
         self.hm_support_set_loss = params.hm_support_set_loss[m
         self.hm_maml_warmup = params.hm_maml_warmup[m
[31m-        self.hm_maml_warmup_coef = 1[m
[32m+[m[32m        self.hm_maml_warmup_coef = 0[m
         self.hm_maml_warmup_epochs = params.hm_maml_warmup_epochs[m
         self.hm_maml_warmup_switch_epochs = params.hm_maml_warmup_switch_epochs[m
         self.hm_maml_update_feature_net = params.hm_maml_update_feature_net[m
[1mdiff --git a/regressionFlow/models/networks_regression_SDD_conditional.py b/regressionFlow/models/networks_regression_SDD_conditional.py[m
[1mindex df738ae..84e8e65 100644[m
[1m--- a/regressionFlow/models/networks_regression_SDD_conditional.py[m
[1m+++ b/regressionFlow/models/networks_regression_SDD_conditional.py[m
[36m@@ -167,7 +167,7 @@[m [mclass CRegression(nn.Module):[m
     #     return self.prior_distribution.log_prob(self.get_fast_weights(global_weight, delta_weight).flatten())[m
 [m
     def get_density_loss(self, weights):[m
[31m-        return self.prior_distribution.log_prob(torch.cat([weights[0], weights[1].reshape(-1, 1)], axis=1).flatten())[m
[32m+[m[32m        return self.prior_distribution.log_prob(torch.cat([weights[0].fast, weights[1].fast.reshape(-1, 1)], axis=1).flatten())[m
 [m
 [m
     def forward(self, x: torch.tensor, global_weights):  # x.shape = 5,65 = 5,64 + bias[m
